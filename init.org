#+OPTIONS: toc:nil
#+EXPORT_FILE_NAME: README
* M-EMACS
* Table of Contents                                               :TOC_2_ORG:
- [[M-EMACS][M-EMACS]]
- [[About EMACS][About EMACS]]
- [[About M-EMACS][About M-EMACS]]
  - [[Screenshot][Screenshot]]
  - [[About README][About README]]
  - [[Installation][Installation]]
  - [[Modification][Modification]]
  - [[Contribution][Contribution]]
  - [[Special Thanks][Special Thanks]]
- [[Startup][Startup]]
  - [[Lexical Binding][Lexical Binding]]
  - [[Early Init][Early Init]]
  - [[Garbage Collection][Garbage Collection]]
  - [[Load Path][Load Path]]
  - [[Define Constants][Define Constants]]
- [[Package Management][Package Management]]
  - [[Melpa Packages][Melpa Packages]]
  - [[Non-Melpa Packages][Non-Melpa Packages]]
  - [[Configure Package Manager][Configure Package Manager]]
  - [[Use Package][Use Package]]
  - [[Auto Package Update][Auto Package Update]]
  - [[Diminish][Diminish]]
- [[Global Functionalities][Global Functionalities]]
  - [[User Information][User Information]]
  - [[Bindings][Bindings]]
  - [[Avy][Avy]]
  - [[Crux][Crux]]
  - [[Ivy, Amx, Counsel, Swiper][Ivy, Amx, Counsel, Swiper]]
  - [[Color Ripgrep][Color Ripgrep]]
  - [[Snails][Snails]]
  - [[Files Directories][Files Directories]]
  - [[Winner][Winner]]
  - [[Which Key][Which Key]]
  - [[Popup Kill Ring][Popup Kill Ring]]
  - [[Undo Tree][Undo Tree]]
  - [[Discover My Major][Discover My Major]]
  - [[Ace Window][Ace Window]]
  - [[Shells][Shells]]
  - [[Sudo Edit][Sudo Edit]]
  - [[Configs][Configs]]
  - [[Functions][Functions]]
- [[User Interface Enhancements][User Interface Enhancements]]
  - [[Doom Themes][Doom Themes]]
  - [[Doom Modeline][Doom Modeline]]
  - [[Dashboard][Dashboard]]
  - [[Fonts and Icons][Fonts and Icons]]
  - [[Smooth Scrolling][Smooth Scrolling]]
  - [[Prettify Symbols][Prettify Symbols]]
  - [[UI Configs][UI Configs]]
- [[General Programming][General Programming]]
  - [[Magit][Magit]]
  - [[Projectile][Projectile]]
  - [[Treemacs][Treemacs]]
  - [[YASnippet][YASnippet]]
  - [[Flycheck][Flycheck]]
  - [[Dumb Jump][Dumb Jump]]
  - [[Parenthesis][Parenthesis]]
  - [[Indentation][Indentation]]
  - [[Quickrun][Quickrun]]
  - [[Format All][Format All]]
  - [[Evil Nerd Commenter][Evil Nerd Commenter]]
  - [[Editing][Editing]]
  - [[Headers][Headers]]
  - [[Jupyter Notebook][Jupyter Notebook]]
  - [[LSP][LSP]]
  - [[DAP][DAP]]
  - [[Company][Company]]
- [[Programming][Programming]]
  - [[Java][Java]]
  - [[C/C++/Objective C][C/C++/Objective C]]
  - [[Golang][Golang]]
  - [[Python][Python]]
  - [[ESS][ESS]]
  - [[TeX][TeX]]
- [[Web Development][Web Development]]
  - [[Web Mode][Web Mode]]
  - [[JavaScript/TypeScript][JavaScript/TypeScript]]
  - [[Emmet][Emmet]]
  - [[Instant Rename Tag][Instant Rename Tag]]
  - [[JSON][JSON]]
- [[Miscellaneous][Miscellaneous]]
  - [[Org][Org]]
  - [[EAF][EAF]]
  - [[ERC][ERC]]
  - [[EWW][EWW]]
  - [[MU4E][MU4E]]
  - [[Tramp][Tramp]]
  - [[PDF Tools][PDF Tools]]
  - [[LeetCode][LeetCode]]
  - [[Pyim][Pyim]]
  - [[EPaint][EPaint]]
  - [[Tetris][Tetris]]
  - [[Speed Type][Speed Type]]
  - [[2048 Game][2048 Game]]
  - [[Zone][Zone]]

* About EMACS
  Emacs changes how you /think/ about programming.

  Emacs is *totally introspectable*. You can always find out 'what code runs when I press this button?'.

  Emacs is an *incremental programming environment*. There's no edit-compile-run cycle. There isn't even an edit-run cycle. You can execute snippets of code and gradually turn them into a finished project. There's no distinction between your editor and your interpreter.

  Emacs is a *mutable environment*. You can set variables, tweak functions with advice, or redefine entire functions. Nothing is off-limits.

  Emacs provides *functionality without applications*. Rather than separate applications, functionality is all integrated into your Emacs instance. Amazingly, this works. Ever wanted to use the same snippet tool for writing C++ classes as well as emails?

  Emacs is full of *incredible software concepts that haven't hit the mainstream yet*. For example:
  - Many platforms have a single item clipboard. Emacs has an *infinite clipboard*.
  - If you undo a change, and then continue editing, you can't redo the original change. Emacs allows *undoing to any historical state*, even allowing tree-based exploration of history.
  - Emacs supports a *reverse variable search*: you can find variables with a given value.
  - You can perform *structural editing* of code, allowing you to make changes without breaking syntax. This works for lisps (paredit) and non-lisps (smartparens).
  - Many applications use a modal GUI: for example, you can't do other edits during a find-and-replace operation. Emacs provides *recursive editing* that allow you to suspend what you're currently doing, perform other edits, then continue the original task.
  Emacs has a *documentation culture*. Emacs includes a usage manual, a lisp programming manual, pervasive docstrings and even an interactive tutorial.

  Emacs has a *broad ecosystem*. If you want to edit code in a niche language, there's probably an Emacs package for it.

  Emacs doesn't have a monopoly on good ideas, and there are other great tools out there. Nonetheless, we believe the [[https://i.stack.imgur.com/7Cu9Z.jpg][Emacs learning curve]] pays off.

  /This beautifully written *About EMACS* section credits to [[https://github.com/remacs/remacs][Remacs]]./
* About M-EMACS
  M-EMACS is a custom GNU Emacs setup and configurations that aims not only to enhance the default Emacs experience, and hopefully be a sample that everyone can easily navigate and reference through a highly detailed README that contains 99% of the *entire* configuration code.

  As a young EMACSer, I have experienced the struggle to find a detailed configuration that is loosely coupled and highly readable. This mostly due to the nature of source codes, sometimes comments are harder to notice or simply not enough. Therefore I decided to construct this README and present any human-readable explanation in a much more human-friendly way. Anyone, particularly Emacs beginners who have no idea where to start with their personal config, is more than welcome to read through this document and copy/paste any part to use it on their own.

  This configuration is designed and tested for *GNU Emacs 26.1 and above only*. However, it is suggested to use *emacs27*, the latest version currently available.
** Screenshot
   [[file:images/Sample.png]]
** About README
   This README is originated from =init.org= that is generated using =M-x org-gfm-export-to-markdown=. Every block of code is generated through this function - it exports sections of code from the =elisp/= directory. You will not see their presence in =init.org=.
** Installation
   1. Install [[https://www.gnu.org/software/emacs/][GNU Emacs]].
      - (Optional) On Ubuntu, =emacs-snapshot= is a great way to get latest version of Emacs.
        #+BEGIN_SRC bash
          sudo add-apt-repository -y ppa:ubuntu-elisp
          sudo apt-get update
          sudo apt-get install emacs-snapshot
        #+END_SRC
      - (Optional) Build latest Emacs from source.
        #+BEGIN_SRC bash
          # Install essential build tools
          sudo apt-get install build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev gnutls-dev libgtk-3-dev git autoconf
          # Clone source
          git clone --depth=1 https://github.com/emacs-mirror/emacs.git
          # Go to source
          cd emacs/
          # Build Emacs
          ./autogen.sh
          ./configure --with-mailutils
          make
          # Install (optional)
          sudo make install
        #+END_SRC
   2. Clone this repo to =HOME= or =~/= path using [[https://git-scm.com/][git]] and update all the submodules.
      #+BEGIN_SRC bash
        cd ~
        git clone --recurse-submodules -j8 https://github.com/MatthewZMD/.emacs.d.git
        cd .emacs.d
      #+END_SRC
   3. Ensure a stable connection to Melpa Packages, then open Emacs.
   4. Enter =y= when prompted with =Auto-update packages now?=, wait for all packages to install.
   5. In your favorite browser, =Ctrl-f Prerequisite= through this README and follow the *Prerequisite* instructions.
   6. Restart Emacs.
*** Further Updates
    I will be updating M-EMACS from time to time, it is best to =git pull= once a while to stay up to date.

    Please also execute =git submodule update --recursive --remote= to sync with all the submodules.
** Modification
   You have the permission to use, modify, distribute in any way you want.

   However, what is /free/ stays /free/. After all, this is [[file:LICENSE][GPL]].

   *Remember* you must manually sync this README with all the new changes you made by:
   1. Please do *NOT* edit this =README.md= file, edit =init.org= instead!
   2. If you add a new mode, create a new =<file-name>.el= file in =elisp/= directory.
   3. Put =(require '<file-name>)= in [[file:init.el][init.el]] accordingly.
   4. Add =#+INCLUDE: "~/.emacs.d/elisp/<place-holder>.el" src emacs-lisp :range-begin "<start-line-wrapper-exclusive>" :range-end "<end-line-wrapper-exclusive>"= in the appropriate section in =init.org=.
   5. Enter =C-x C-s= to save and update =:lines=. (if you don't see the updated effect, run =M-x save-and-update-includes= manually)
   6. Call =M-x org-gfm-export-to-markdown= to update =README.md= automatically.
** Contribution
   If you spotted a bug or you have any suggestions, please fill in an issue. If you have something to fix, feel free to create a pull request.
** Special Thanks
   Everyone starts somewhere, and I started here.
  - [[https://github.com/seagle0128/.emacs.d][Vincent Zhang's Centaur Emacs]]
  - [[https://github.com/hlissner/doom-emacs][Henrik Lissner's Doom Emacs]]
  - [[https://github.com/poncie/.emacs.d][Poncie Reyes's .emacs.d]]

* Startup
** Lexical Binding
   Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why?]]
   #+BEGIN_QUOTE
   Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables, a feature, mostly by accident, common to old lisp dialects. While dynamic scope has some selective uses, it’s widely regarded as a mistake for local variables, and virtually no other languages have adopted it.
   #+END_QUOTE
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "1-2"
** Early Init
   Emacs27 introduces =early-init.el=, which is run before =init.el=, before package and UI initialization happens.
*** Compatibility With 26
    Ensure =emacs-version>=26=, manually require =early-init= configurations if =emacs-version<27=.
    #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "CheckVer" :range-end "-CheckVer" :lines "41-53"
*** Defer Garbage Collection
    Defer garbage collection further back in the startup process, according to [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][hlissner]].
    #+BEGIN_QUOTE
    The GC eats up quite a bit of time, easily doubling startup time. The trick is to turn up the memory threshold as early as possible.
    #+END_QUOTE
    #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "DeferGC" :range-end "-DeferGC"  :lines "42-43"
*** Disable =package-enable-at-startup=
    Package initialize occurs automatically, before =user-init-file= is loaded, but after =early-init-file=.
    We handle package initialization, so we must prevent Emacs from doing it early!
    #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetPES" :range-end "-UnsetPES"  :lines "46-47"
*** Unset =file-name-handler-alist=
    Every file opened and loaded by Emacs will run through this list to check for a proper handler for the file, but during startup, it won’t need any of them.
    #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetFNHA" :range-end "-UnsetFNHA" :lines "50-52"
*** Disable =site-run-file=
    #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetSRF" :range-end "-UnsetSRF" :lines "55-56"
*** Disable Unnecessary Interface
    It will be faster to disable them here before they've been initialized.
    #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "DisableUnnecessaryInterface" :range-end "-DisableUnnecessaryInterface" :lines "59-64"
** Garbage Collection
*** Set =gc-cons-threshold= Smaller for Interactive Use
    A large =gc-cons-threshold= may cause freezing and stuttering during long-term interactive use.

    If you experience freezing, decrease this amount, if you increase stuttering, increase this amount.
    #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "BetterGC" :range-end "-BetterGC" :lines "56-66"
    Garbage Collect when Emacs is out of focus and avoid garbage collection when using minibuffer.
    #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "AutoGC" :range-end "-AutoGC" :lines "69-86"
** Load Path
   Since all the configuration files are stored in =elisp/= folder, they need to be added to =load-path= now.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "LoadPath" :range-end "-LoadPath"  :lines "89-103"
** Define Constants
   #+INCLUDE: "~/.emacs.d/elisp/init-const.el" src emacs-lisp :range-begin "Consts" :range-end "-Consts"  :lines "46-108"
* Package Management
  Some packages are disabled with the =:disabled= tag, because I don't use them very often. They might not work.
** Melpa Packages
   Configure package archives, where to install online packages and add them to =load-path=.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "MelpaPackages" :range-end "-MelpaPackages" :lines "42-52"
** Non-Melpa Packages
   Add packages contained in =site-elisp/= to =load-path= too.
*** Add Packages Manually from Git
    #+BEGIN_SRC bash
      cd site-elisp/
      git submodule add https://github.com/foo/bar.git
    #+END_SRC
    Verify =/.gitmodules= file that the newly added package exist.
*** Update Manually Added Packages
    #+BEGIN_SRC bash
      git submodule init
      git submodule update
    #+END_SRC
** Configure Package Manager
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "ConfigurePackageManager" :range-end "-ConfigurePackageManager" :lines "55-63"
** Use Package
   My Emacs configuration is almost entirely dependant on [[https://github.com/jwiegley/use-package][use-package]].
   #+BEGIN_QUOTE
   The =use-package= macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy. I created it because I have over 80 packages that I use in Emacs, and things were getting difficult to manage. Yet with this utility my total load time is around 2 seconds, with no loss of functionality!
   #+END_QUOTE
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "ConfigureUsePackage" :range-end "-ConfigureUsePackage"  :lines "66-80"
** Auto Package Update
   [[https://github.com/rranelli/auto-package-update.el][Auto package update]] automatically updates installed packages if at least =auto-package-update-interval= days have passed since the last update.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "AutoPackageUpdate" :range-end "-AutoPackageUpdate" :lines "83-92"
** Diminish
   [[https://github.com/emacsmirror/diminish][Diminish]], a feature that removes certain minor modes from mode-line.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "DimPac" :range-end "-DimPac" :lines "95-96"
* Global Functionalities
** User Information
   *Prerequisite*: Please update this file your personal info.
   #+INCLUDE: "~/.emacs.d/elisp/init-const.el" src emacs-lisp :range-begin "UserInfo" :range-end "-UserInfo"" :lines "41-43"
** Bindings
   #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "DefBindings" :range-end "-DefBindings"" :lines "49-64"
** Avy
   [[https://github.com/abo-abo/avy][Avy]], a nice way to move around text.
   #+INCLUDE: "~/.emacs.d/elisp/init-avy.el" src emacs-lisp :range-begin "AvyPac" :range-end "-AvyPac" :lines "44-54"
** Crux
   [[https://github.com/bbatsov/crux][Crux]], a Collection of Ridiculously Useful eXtensions for Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-crux.el" src emacs-lisp :range-begin "CruxPac" :range-end "-CruxPac" :lines "41-52"
** Ivy, Amx, Counsel, Swiper
   [[https://github.com/abo-abo/swiper][Ivy]], a generic completion mechanism for Emacs. It utilizes [[https://github.com/DarwinAwardWinner/amx][Amx]], [[https://github.com/abo-abo/swiper][Counsel]] and [[https://github.com/abo-abo/swiper][Swiper]].
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "IvyPac" :range-end "-IvyPac" :lines "45-74"
** Color Ripgrep
   [[https://github.com/manateelazycat/color-rg][Color rg]], a search and refactoring tool based on /ripgrep/ that is used to search text.

   *Prerequisite*: Please install [[https://github.com/BurntSushi/ripgrep#installation][ripgrep]] and ensure =rg= is in the =PATH=.
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "ColorRGPac" :range-end "-ColorRGPac" :lines "77-81"
** Snails
   [[https://github.com/manateelazycat/snails][Snails]], a fuzzy search framework. It utilizes [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] if you are using Mac.
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "SnailsPac" :range-end "-SnailsPac" :lines "84-110"
** Files Directories
*** Dired
    Dired, the directory editor.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "DiredPackage" :range-end "-DiredPackage" :lines "41-73"
*** Disk Usage
    [[https://gitlab.com/ambrevar/emacs-disk-usage][Disk Usage]], a file system analyzer that offers a tabulated view of file listings sorted by size.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "DiskUsage" :range-end "-DiskUsage" :lines "76-78"
*** Super Save
    [[https://github.com/bbatsov/super-save][Super Save]], enables save when switching between buffers, an Emacs frame losing focus, etc.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "SuperSave" :range-end "-SuperSave" :lines "81-89"
*** Save All Buffers
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "SaveAllBuffers" :range-end "-SaveAllBuffers" :lines "92-98"
** Winner
   Winner, a mode to restore previous window layouts.
   #+INCLUDE: "~/.emacs.d/elisp/init-winner.el" src emacs-lisp :range-begin "WinnerPac" :range-end "-WinnerPac" :lines "41-57"
** Which Key
   [[https://github.com/justbur/emacs-which-key][Which Key]], a feature that displays the key bindings following the incomplete command.
   #+INCLUDE: "~/.emacs.d/elisp/init-which-key.el" src emacs-lisp :range-begin "WhichKeyPac" :range-end "-WhichKeyPac" :lines "41-48"
** Popup Kill Ring
   [[https://github.com/waymondo/popup-kill-ring][Popup Kill Ring]], a feature that provides the ability to browse Emacs kill ring in autocomplete style popup menu.
   #+INCLUDE: "~/.emacs.d/elisp/init-popup-kill-ring.el" src emacs-lisp :range-begin "PopKillRing" :range-end "-PopKillRing" :lines "41-43"
** Undo Tree
   [[https://www.emacswiki.org/emacs/UndoTree][Undo tree]], a feature that provides a visualization of the undos in a file.
   #+INCLUDE: "~/.emacs.d/elisp/init-undo-tree.el" src emacs-lisp :range-begin "UndoTreePac" :range-end "-UndoTreePac" :lines "41-48"
** Discover My Major
   [[https://github.com/jguenther/discover-my-major][Discover my major]], a feature that discovers key bindings and their meaning for the current Emacs major mode.
   #+INCLUDE: "~/.emacs.d/elisp/init-discover-my-major.el" src emacs-lisp :range-begin "DiscMyMajor" :range-end "-DiscMyMajor" :lines "41-43"
** Ace Window
   [[https://github.com/abo-abo/ace-window][Ace Window]], a package for selecting windows to switch to.
   #+INCLUDE: "~/.emacs.d/elisp/init-ace-window.el" src emacs-lisp :range-begin "AceWindowPac" :range-end "-AceWindowPac"  :lines "41-43"
** Shells
*** Aweshell
    [[https://github.com/manateelazycat/aweshell][Aweshell]], shell extension base on eshell with better features.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "AweshellPac" :range-end "-AweshellPac" :lines "44-50"
*** Shell Here
    [[https://github.com/ieure/shell-here][Shell Here]], a tool that opens a shell buffer in (or relative to) =default-directory=.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "ShellHerePac" :range-end "-ShellHerePac" :lines "53-58"
*** MultiTerm
    [[https://www.emacswiki.org/emacs/MultiTerm][MultiTerm]], a mode based on term.el, for managing multiple terminal buffers in Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "MultiTermPac" :range-end "-MultiTermPac" :lines "61-69"
*** Term Keys
    [[https://github.com/CyberShadow/term-keys][Term Keys]], a lossless keyboard input for Emacs in terminal emulators.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "TermKeysPac" :range-end "-TermKeysPac" :lines "72-75"
** Sudo Edit
   [[https://github.com/nflath/sudo-edit][Sudo Edit]], an utility for opening files with =sudo=.
   #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "SudoEditPac" :range-end "-SudoEditPac" :lines "44-46"
** Configs
   Some essential configs that make my life a lot easier.
*** UTF-8 Coding System
    Use UTF-8 as much as possible with unix line endings.
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "UTF8Coding" :range-end "-UTF8Coding" :lines "67-78"
*** Optimize Editing Experience
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "EditExp" :range-end "-EditExp" :lines "81-106"
*** History
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "History" :range-end "-History" :lines "109-133"
*** Small Configs
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "SmallConfigs" :range-end "-SmallConfigs" :lines "136-172"
** Functions
   Important functions.
*** Resize Window Width / Height Functions
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "ResizeWidthheight" :range-end "-ResizeWidthheight" :lines "44-82"
*** Edit This Configuration File Shortcut
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "EditConfig" :range-end "-EditConfig" :lines "85-91"
*** Update Org Mode Include Automatically
    Update Org Mode INCLUDE Statements Automatically from [[http://endlessparentheses.com/updating-org-mode-include-statements-on-the-fly.html][Artur Malabarba]].
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "OrgIncludeAuto" :range-end "-OrgIncludeAuto" :lines "94-139"
*** MiniBuffer Functions
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "BetterMiniBuffer" :range-end "-BetterMiniBuffer" :lines "142-151"
*** Display Line Overlay
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "DisplayLineOverlay" :range-end "-DisplayLineOverlay" :lines "154-166"
*** Read Lines From File
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "ReadLines" :range-end "-ReadLines" :lines "169-173"
*** Where Am I
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "WhereAmI" :range-end "-WhereAmI" :lines "176-180"
* User Interface Enhancements
** Doom Themes
   [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]], an UI plugin and pack of themes.
   #+INCLUDE: "~/.emacs.d/elisp/init-theme.el" src emacs-lisp :range-begin "DoomThemes" :range-end "-DoomThemes" :lines "45-54"
** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Doom Modeline]], a modeline from DOOM Emacs, but more powerful and faster.
   #+INCLUDE: "~/.emacs.d/elisp/init-theme.el" src emacs-lisp :range-begin "DoomModeline" :range-end "-DoomModeline" :lines "57-66"
** Dashboard
*** Dashboard
    [[https://github.com/rakanalh/emacs-dashboard][Dashboard]], an extensible Emacs startup screen.

    Use either =KEC_Dark_BK.png= or =KEC_Light_BK.png= depends on the backgrond theme.
    #+INCLUDE: "~/.emacs.d/elisp/init-dashboard.el" src emacs-lisp :range-begin "DashboardPac" :range-end "-DashboardPac" :lines "41-83"
*** Page Break Lines
    [[https://github.com/purcell/page-break-lines][Page-break-lines]], a feature that displays ugly form feed characters as tidy horizontal rules.
    #+INCLUDE: "~/.emacs.d/elisp/init-dashboard.el" src emacs-lisp :range-begin "PBLPac" :range-end "-PBLPac" :lines "86-89"
** Fonts and Icons
   *Prerequisite*: Install all the available fonts and icons from =fonts/=.
*** Fonts
    #+INCLUDE: "~/.emacs.d/elisp/init-fonts.el" src emacs-lisp :range-begin "FontsList" :range-end "-FontsList" :lines "44-47"
    Function to switch between fonts.
    #+INCLUDE: "~/.emacs.d/elisp/init-fonts.el" src emacs-lisp :range-begin "FontFun" :range-end "-FontFun" :lines "50-69"
*** Icons
    [[https://github.com/domtronn/all-the-icons.el][All The Icons]], a utility package to collect various Icon Fonts. Enable only in GUI Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-all-the-icons.el" src emacs-lisp :range-begin "ATIPac" :range-end "-ATIPac" :lines "44-45"
    [[https://github.com/jtbm37/all-the-icons-dired][All The Icons Dired]], an icon set for Dired.
    #+INCLUDE: "~/.emacs.d/elisp/init-all-the-icons.el" src emacs-lisp :range-begin "ATIDiredPac" :range-end "-ATIDiredPac" :lines "48-61"
** Smooth Scrolling
   Configurations to smooth scrolling.
   #+INCLUDE: "~/.emacs.d/elisp/init-scroll.el" src emacs-lisp :range-begin "SmoothScroll" :range-end "-SmoothScroll" :lines "41-54"
** Prettify Symbols
   [[https://www.emacswiki.org/emacs/PrettySymbol][Prettify symbols mode]], a built-in mode for displaying sequences of characters as fancy characters or symbols.
   #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "PreSym" :range-end "-PreSym" :lines "44-58"
** UI Configs
*** Title Bar
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "TitleBar" :range-end "-TitleBar" :lines "64-65"
*** Simplify Yes/No Prompts
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "YorN" :range-end "-YorN" :lines "68-69"
*** Disable Splash Screen
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "StartupScreen" :range-end "-StartupScreen" :lines "72-75"
*** Line Numbers
    Display line numbers, and column numbers in modeline.
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "DisLineNum" :range-end "-DisLineNum" :lines "78-85"
*** Modeline Time and Battery
    Display time and battery information in modeline.
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "DisTimeBat" :range-end "-DisTimeBat" :lines "88-90"
* General Programming
** Magit
   [[https://magit.vc/][Magit]], an interface to the version control system Git.
   #+INCLUDE: "~/.emacs.d/elisp/init-magit.el" src emacs-lisp :range-begin "MagitPac" :range-end "-MagitPac" :lines "44-47"
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]], a Project Interaction Library for Emacs.

   *Prerequisite*: Windows OS: Install [[https://github.com/bmatzelle/gow/releases][Gow]] and ensure it's in =PATH=.

   [[https://github.com/bmatzelle/gow][Gow]] is a lightweight installer that installs useful open source UNIX applications compiled as native win32 binaries. Specifically, =tr= is needed for Projectile alien indexing.
   #+INCLUDE: "~/.emacs.d/elisp/init-projectile.el" src emacs-lisp :range-begin "ProjPac" :range-end "-ProjPac" :lines "44-56"
** Treemacs
   [[https://github.com/Alexander-Miller/treemacs][Treemacs]], a tree layout file explorer for Emacs.
*** Treemacs
    #+INCLUDE: "~/.emacs.d/elisp/init-treemacs.el" src emacs-lisp :range-begin "TreemacsPac" :range-end "-TreemacsPac" :lines "41-89"
*** Treemacs Magit
    #+INCLUDE: "~/.emacs.d/elisp/init-treemacs.el" src emacs-lisp :range-begin "TreeMagit" :range-end "-TreeMagit" :lines "92-95"
*** Treemacs Projectile
    #+INCLUDE: "~/.emacs.d/elisp/init-treemacs.el" src emacs-lisp :range-begin "TreeProj" :range-end "-TreeProj" :lines "98-101"
** YASnippet
*** YASnippet
    [[https://github.com/joaotavora/yasnippet][YASnippet]], a programming template system for Emacs. It loads [[https://github.com/AndreaCrotti/yasnippet-snippets][YASnippet Snippets]], a collection of yasnippet snippets for many languages.
    #+INCLUDE: "~/.emacs.d/elisp/init-yasnippet.el" src emacs-lisp :range-begin "YASnippetPac" :range-end "-YASnippetPac" :lines "41-62"
** Flycheck
   [[https://www.flycheck.org/en/latest/][Flycheck]], a syntax checking extension.
   #+INCLUDE: "~/.emacs.d/elisp/init-flycheck.el" src emacs-lisp :range-begin "FlyCheckPac" :range-end "-FlyCheckPac" :lines "41-49"
** Dumb Jump
   [[https://github.com/jacktasia/dumb-jump][Dumb jump]], an Emacs "jump to definition" package.
   #+INCLUDE: "~/.emacs.d/elisp/init-dumb-jump.el" src emacs-lisp :range-begin "DumbJump" :range-end "-DumbJump" :lines "41-48"
** Parenthesis
*** Smartparens
    [[https://github.com/Fuco1/smartparens][Smartparens]], a minor mode for dealing with pairs.
    #+INCLUDE: "~/.emacs.d/elisp/init-parens.el" src emacs-lisp :range-begin "SmartParensPac" :range-end "-SmartParensPac" :lines "44-70"
*** Match Parenthesis
    Match and automatically pair parenthesis, and show parenthesis even when it went offscreen from [[https://with-emacs.com/posts/editing/show-matching-lines-when-parentheses-go-off-screen/][Clemens Radermacher]].
    #+INCLUDE: "~/.emacs.d/elisp/init-parens.el" src emacs-lisp :range-begin "MatchParens" :range-end "-MatchParens" :lines "73-112"
** Indentation
   [[https://github.com/DarthFennec/highlight-indent-guides][Highlight Indent Guides]], a feature that highlights indentation levels.
   #+INCLUDE: "~/.emacs.d/elisp/init-indent.el" src emacs-lisp :range-begin "HighLightIndentPac" :range-end "-HighLightIndentPac" :lines "44-53"
   Indentation Configuration
   #+INCLUDE: "~/.emacs.d/elisp/init-indent.el" src emacs-lisp :range-begin "IndentConfig" :range-end "-IndentConfig" :lines "56-71"
** Quickrun
   [[https://github.com/syohex/emacs-quickrun][Quickrun]], compile and run source code quickly.
   #+INCLUDE: "~/.emacs.d/elisp/init-quickrun.el" src emacs-lisp :range-begin "QuickrunPac" :range-end "-QuickrunPac" :lines "41-45"
** Format All
   [[https://github.com/lassik/emacs-format-all-the-code][Format all]], a feature that lets you auto-format source code.

   *Prerequisite*: Read [[https://github.com/lassik/emacs-format-all-the-code#supported-languages][Supported Languages]] to see which additional tool you need to install for the specific language.
   #+INCLUDE: "~/.emacs.d/elisp/init-format.el" src emacs-lisp :range-begin "FormatAllPac" :range-end "-FormatAllPac" :lines "41-43"
** Evil Nerd Commenter
   [[https://github.com/redguardtoo/evil-nerd-commenter][Evil Nerd Commenter]], a tool that helps you comment code efficiently.
   #+INCLUDE: "~/.emacs.d/elisp/init-comment.el" src emacs-lisp :range-begin "EvilNerdCommenPac" :range-end "-EvilNerdCommenPac" :lines "41-45"
** Editing
*** Iedit
    [[https://github.com/victorhge/iedit][Iedit]], a minor mode that allows editing multiple regions simultaneousy in a buffer or a region.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "IEditPac" :range-end "-IEditPac" :lines "43-46"
*** Awesome Pair
    [[https://github.com/manateelazycat/awesome-pair][Awesome Pair]], a feature that provides grammatical parenthesis completion.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "AwesomePairPac" :range-end "-AwesomePairPac" :lines "49-59"
*** Delete Block
    [[https://github.com/manateelazycat/delete-block][Delete Block]], a feature that deletes block efficiently.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "DeleteBlockPac" :range-end "-DeleteBlockPac" :lines "62-69"
** Headers
   [[https://www.emacswiki.org/emacs/header2.el][Header2]], a support for creation and update of file headers.
   #+INCLUDE: "~/.emacs.d/elisp/init-header.el" src emacs-lisp :range-begin "Header2Pac" :range-end "-Header2Pac" :lines "41-50"
** Jupyter Notebook
   [[https://github.com/millejoh/emacs-ipython-notebook][Emacs IPython Notebook]], a [[https://jupyter.org/][Jupyter]] (formerly IPython) client in Emacs.
*** Usage
    1. Execute =M-x ein:run= to launch a local Jupyter session.
    2. Login with =M-x ein:login= to a local or remote session.
    3. Open =.ipynb= file and press =C-c C-o=.
    #+INCLUDE: "~/.emacs.d/elisp/init-ein.el" src emacs-lisp :range-begin "EINPac" :range-end "-EINPac" :lines "41-44"
** LSP
*** LSP Mode
    [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol Mode]], a client/library for the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]. M-EMACS tries to use lsp-mode whenever possible.

    #+INCLUDE: "~/.emacs.d/elisp/init-lsp.el" src emacs-lisp :range-begin "LSPPac" :range-end "-LSPPac" :lines "44-56"
*** LSP UI
    [[https://github.com/emacs-lsp/lsp-ui][Language Server Protocol UI]], provides all the higher level UI modules of lsp-mode, like flycheck support and code lenses.
    #+INCLUDE: "~/.emacs.d/elisp/init-lsp.el" src emacs-lisp :range-begin "LSPUI" :range-end "-LSPUI" :lines "59-87"
** DAP
   [[https://github.com/emacs-lsp/dap-mode][Debug Adapter Protocol Mode]], a client/library for the [[https://code.visualstudio.com/api/extension-guides/debugger-extension][Debug Adapter Protocol]].

   *Prerequisite*: See [[https://github.com/emacs-lsp/dap-mode#configuration][Configuration]] to configure DAP appropriately.
   #+INCLUDE: "~/.emacs.d/elisp/init-lsp.el" src emacs-lisp :range-begin "DAPPac" :range-end "-DAPPac" :lines "90-110"
** Company
*** Company Mode
    [[http://company-mode.github.io/][Company]], a text completion framework for Emacs.

    The function =smarter-yas-expand-next-field-complete= is to smartly resolve TAB conflicts in company and yasnippet packages.
    #+INCLUDE: "~/.emacs.d/elisp/init-company.el" src emacs-lisp :range-begin "ComPac" :range-end "-ComPac" :lines "44-81"
*** Company LSP
    [[https://github.com/tigersoldier/company-lsp][Company LSP]], a Company completion backend for lsp-mode.
    #+INCLUDE: "~/.emacs.d/elisp/init-company.el" src emacs-lisp :range-begin "CompanyLSPPac" :range-end "-CompanyLSPPac" :lines "84-87"
*** Company TabNine
    [[https://github.com/TommyX12/company-tabnine][Company TabNine]], A company-mode backend for [[https://tabnine.com/][TabNine]], the all-language autocompleter.

    This is enabled by default, if ever you find it not good enough for a particular completion, simply use =M-q= to immediately switch to default backends.

    *Prerequisite*: Execute =M-x company-tabnine-install-binary= to install the TabNine binary for your system.
    #+INCLUDE: "~/.emacs.d/elisp/init-company.el" src emacs-lisp :range-begin "CompanyTabNinePac" :range-end "-CompanyTabNinePac" :lines "90-126"
*** Company Box
    [[https://github.com/sebastiencs/company-box][Company Box]], a company front-end with icons.
    #+INCLUDE: "~/.emacs.d/elisp/init-company.el" src emacs-lisp :range-begin "CompanyBoxPac" :range-end "-CompanyBoxPac" :lines "129-219"
* Programming
** Java
*** LSP Java
    [[https://github.com/emacs-lsp/lsp-java][LSP Java]], Emacs Java IDE using [[https://projects.eclipse.org/projects/eclipse.jdt.ls][Eclipse JDT Language Server]]. Note that this package is dependant on [[https://github.com/tkf/emacs-request][Request]].

    *Prerequisite*: Install [[https://maven.apache.org/download.cgi][Maven]] and ensure it's in =PATH=.
    #+INCLUDE: "~/.emacs.d/elisp/init-java.el" src emacs-lisp :range-begin "LSPJavaPac" :range-end "-LSPJavaPac" :lines "44-52"
** C/C++/Objective C
   *Prerequisite*: Since all completion features are provided by [[https://github.com/emacs-lsp/lsp-mode][LSP Mode]], it needs to setup.
   - Install [[https://cmake.org/download/][CMake]] >= 3.8 for all OS.
   - *nix OS:
     - It is suggested to use [[https://github.com/MaskRay/ccls][CCLS]] as LSP server. Now [[https://github.com/MaskRay/ccls/wiki/Build][build]] it.
     - Set =ccls-executable= to the directory where your ccls is built.
   - Windows OS:
     - Install [[http://www.mingw.org/wiki/Install_MinGW][MinGW]] for Compilation.
     - It is a pain to build CCLS on Windows, install [[https://clang.llvm.org/extra/clangd/Installation.html][Clangd]] and ensure it's in =PATH= instead.
*** CCLS
    [[https://github.com/MaskRay/emacs-ccls][Emacs CCLS]], a client for [[https://github.com/MaskRay/ccls][CCLS]], a C/C++/Objective-C language server supporting multi-million line C++ code-bases, powered by libclang.
    #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "CCLSPac" :range-end "-CCLSPac" :lines "44-66"
*** Modern C++ Font Lock
    [[https://github.com/ludwigpacifici/modern-cpp-font-lock][Modern CPP Font Lock]], font-locking for "Modern C++".
    #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "CPPFontLockPac" :range-end "-CPPFontLockPac" :lines "69-72"
** Golang
   [[https://github.com/dominikh/go-mode.el][Go Mode]], an Emacs mode for editing Golang code.

   *Prerequisite*: [[https://github.com/golang/go/wiki/gopls][gopls]] is suggested for Golang's LSP support.
   #+BEGIN_SRC bash
     go get golang.org/x/tools/gopls@latest
   #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "GoPac" :range-end "-GoPac" :lines "75-78"
** Python
*** Python Configuration
    #+INCLUDE: "~/.emacs.d/elisp/init-python.el" src emacs-lisp :range-begin "PythonConfig" :range-end "-PythonConfig" :lines "45-53"
*** LSP Python MS
    [[https://github.com/andrew-christianson/lsp-python-ms][LSP Python MS]], a lsp-mode client leveraging [[https://github.com/Microsoft/python-language-server][Microsoft's Python Language Server]].
    #+INCLUDE: "~/.emacs.d/elisp/init-python.el" src emacs-lisp :range-begin "LSPPythonPac" :range-end "-LSPPythonPac" :lines "56-61"
** ESS
   [[https://ess.r-project.org/][Emacs Speaks Statistics]], short for ESS, it's designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS.

   *Prerequisite*: Install [[https://cran.r-project.org/mirrors.html][R]] to start using ESS with R.
   #+INCLUDE: "~/.emacs.d/elisp/init-ess.el" src emacs-lisp :range-begin "ESSPac" :range-end "-ESSPac" :lines "41-46"
** TeX
   *Prerequisite*: Please install [[https://www.tug.org/texlive/quickinstall.html][TeX Live]].
*** AUCTeX
    [[https://www.gnu.org/software/auctex/][AUCTeX]], an extensible package for writing and formatting TeX files. It supports many different TeX macro packages, including AMS-TEX, LaTeX, Texinfo, ConTEXt, and docTEX (dtx files).
    #+INCLUDE: "~/.emacs.d/elisp/init-latex.el" src emacs-lisp :range-begin "AUCTeXPac" :range-end "-AUCTeXPac" :lines "46-69"
*** Org Edit LaTeX
    [[https://github.com/et2010/org-edit-latex][Org Edit LaTeX]], an extension to edit LaTeX fragment/environment in an edit buffer, even to complete and preview LaTeX in the edit buffer.
    #+INCLUDE: "~/.emacs.d/elisp/init-latex.el" src emacs-lisp :range-begin "OrgLatexPac" :range-end "-OrgLatexPac" :lines "72-75"
* Web Development
  *Prerequisite*: Install [[https://nodejs.org/en/download/][NodeJS]] and ensure it's in =PATH=. Execute following commands to enable LSP for JavaScript/TypeScript/HTML:
  #+BEGIN_SRC bash
    npm i -g typescript
    npm i -g typescript-language-server
  #+END_SRC
** Web Mode
   [[https://github.com/fxbois/web-mode][Web mode]], a major mode for editing web templates.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "WebModePac" :range-end "-WebModePac" :lines "41-48"
** JavaScript/TypeScript
*** JavaScript2 Mode
    [[https://github.com/mooz/js2-mode][JS2 mode]], a feature that offers improved JavsScript editing mode.
    #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "Js2Pac" :range-end "-Js2Pac" :lines "51-54"
*** TypeScript Mode
    [[https://github.com/emacs-typescript/typescript.el][TypeScript mode]], a feature that offers TypeScript support for Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "TypeScriptPac" :range-end "-TypeScriptPac" :lines "57-60"
** Emmet
   [[https://github.com/smihica/emmet-mode][Emmet]], a feature that allows writing HTML using CSS selectors along with =C-j=. See [[https://github.com/smihica/emmet-mode#usage][usage]] for more information.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "EmmetPac" :range-end "-EmmetPac" :lines "63-66"
** Instant Rename Tag
   [[https://github.com/manateelazycat/instant-rename-tag][Instant Rename Tag]], a plugin that provides ability to rename html tag pairs instantly.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "InstantRenameTagPac" :range-end "-InstantRenameTagPac" :lines "69-72"
** JSON
   [[https://github.com/joshwnj/json-mode][JSON Mode]], a major mode for editing JSON files.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "JsonPac" :range-end "-JsonPac" :lines "75-77"
* Miscellaneous
** Org
   [[https://orgmode.org/][Org]], a Emacs built-in tool for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

   *Prerequisite*: Configure =(org-agenda-files (list "~/org/agenda/"))= to your agenda folder to use org-agenda.
   #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "OrgPac" :range-end "-OrgPac" :lines "41-85"
*** TOC Org
    [[https://github.com/snosov1/toc-org][TOC Org]] generates table of contents for =.org= files
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "TocOrgPac" :range-end "-TocOrgPac" :lines "88-90"
*** HTMLize
    [[https://github.com/hniksic/emacs-htmlize][HTMLize]], a tool that converts buffer text and decorations to HTML.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "HTMLIZEPac" :range-end "-HTMLIZEPac" :lines "93-94"
*** GFM Exporter
    [[https://github.com/larstvei/ox-gfm][OX-GFM]], a Github Flavored Markdown exporter for Org Mode.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "OXGFMPac" :range-end "-OXGFMPac" :lines "97-98"
*** PlantUML and Graphviz
    [[https://github.com/skuro/plantuml-mode][PlantUML Mode]], a major mode for editing PlantUML sources.

    *Prerequisite*:
    1. Install [[http://plantuml.com/download][plantuml]] and configure =(org-plantuml-jar-path (expand-file-name "path/to/plantuml.jar"))=.
    2. Install [[https://graphviz.gitlab.io/download/][Graphviz]] on your system to support graph visualization. Execute =sudo apt install graphviz= in Ubuntu.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "PlantUMLPac" :range-end "-PlantUMLPac" :lines "101-110"
** EAF
   [[https://github.com/manateelazycat/emacs-application-framework][Emacs Application Framework]], a development framework that integrates any PyQt program into Emacs.

   *Prerequisite*: Please install =python3= and =pip3=. Then execute below command:
   #+BEGIN_SRC bash
   sudo pip3 install dbus-python PyMuPDF grip qrcode pyqt5 python-xlib PyQtWebEngine
   #+END_SRC
   Note that If you are using Debian/Ubuntu, it is possible that =QtWebEngine= is [[https://marc.info/?l=kde-core-devel&m=142954900813235&w=2][not working]]. Install the following:
   #+BEGIN_SRC bash
   sudo apt-get install python3-pyqt5.qtwebengine python3-pyqt5.qtmultimedia
   #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-eaf.el" src emacs-lisp :range-begin "EAFPac" :range-end "-EAFPac" :lines "44-63"
** ERC
   [[https://www.emacswiki.org/emacs/ERC][Emacs Relay Chat]], a powerful, modular, and extensible [[http://www.irc.org/][IRC]] client for Emacs. It utilizes [[https://github.com/leathekd/erc-hl-nicks][erc-hl-nicks]] for nickname highlighting and [[https://github.com/kidd/erc-image.el][erc-image]] to fetch and show received images in ERC.

   *Prerequisite*: Put IRC credentials in the file =~/.authinfo= and configure =erc-nick= to your IRC nickname.
   #+BEGIN_SRC text
     machine irc.freenode.net login <nickname> password <password> port 6697
   #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-erc.el" src emacs-lisp :range-begin "ERCPac" :range-end "-ERCPac" :lines "45-136"
** EWW
   Emacs Web Wowser, the HTML-based Emacs Web Browser.
   #+INCLUDE: "~/.emacs.d/elisp/init-eww.el" src emacs-lisp :range-begin "EWWPac" :range-end "-EWWPac" :lines "44-54"
** MU4E
   [[https://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]], a package that provides an emacs-based e-mail client which uses [[https://www.djcbsoftware.nl/code/mu/][mu]] as its backend. This mu4e configuration is tailored for Gmail.

   *Prerequisite*:
   1. [[https://wiki.archlinux.org/index.php/Isync][Configure]] IMAP using [[https://wiki.archlinux.org/index.php/Isync][mbsync]], put your =.mbsyncrc= config file in =~/.emacs.d/mu4e/=. A [[https://gist.github.com/MatthewZMD/39cc00260486d17450f7228a4f36891f][sample]] is provided.
   2. Install [[https://www.djcbsoftware.nl/code/mu/][mu]].
   3. Execute the follwing commands
      #+BEGIN_SRC bash
        mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -Dmn gmail
        mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a
        mu index --maildir=~/Maildir/
      #+END_SRC
      - If you are getting =Invalid Credentials= error and you are sure the password is correct, check [[https://appuals.com/fix-your-imap-server-wants-to-alert-you-invalid-credentials/][this]] link.
   #+INCLUDE: "~/.emacs.d/elisp/init-mu4e.el" src emacs-lisp :range-begin "Mu4ePac" :range-end "-Mu4ePac" :lines "42-126"
** Tramp
   [[https://www.emacswiki.org/emacs/TrampMode][Tramp]], short for Transparent Remote Access, Multiple Protocols is a package for editing remote files using a remote shell connection (rlogin, telnet, ssh).
*** Google Cloud Platform
    Connect to Google Cloud Platform using the following:
    #+BEGIN_SRC text
      /gssh:some-instance:/path/to/file
    #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-tramp.el" src emacs-lisp :range-begin "TrampPac" :range-end "-TrampPac" :lines "41-58"
** PDF Tools
   [[https://github.com/politza/pdf-tools][PDF Tools]], an Emacs support library for PDF files. It works best on non-Windows OS.

   *Note*: You need [[https://linux.die.net/man/1/convert][convert]] provided from imagemagick to /Pick a Link and Jump/ with F.
   #+INCLUDE: "~/.emacs.d/elisp/init-pdf.el" src emacs-lisp :range-begin "PDFToolsPac" :range-end "-PDFToolsPac" :lines "44-56"
** LeetCode
   [[https://github.com/kaiwk/leetcode.el][LeetCode]], an Emacs LeetCode client. Note that this package is dependant on [[https://github.com/skeeto/emacs-aio][aio]] and [[https://github.com/davazp/graphql-mode][GraphQL]].
   #+INCLUDE: "~/.emacs.d/elisp/init-leetcode.el" src emacs-lisp :range-begin "LeetCodePac" :range-end "-LeetCodePac" :lines "44-53"
** Pyim
   [[https://github.com/tumashu/pyim][Pyim]], an Emacs Chinese Pinyin Input. It uses [[https://github.com/tumashu/posframe][posframe]] package to display candidates.

   我已经停止使用作者推荐的无痛中英切换，它对需要同时打英文和中文的情况不是很友好。如需切换输入法，请善用 =C-\= 。
   #+INCLUDE: "~/.emacs.d/elisp/init-pyim.el" src emacs-lisp :range-begin "PyimPac" :range-end "-PyimPac" :lines "41-59"
*** Pyim BaseDict
    [[https://github.com/tumashu/pyim-basedict][Pyim BaseDict]], the default Chinese-Pyim dictionary.
    #+INCLUDE: "~/.emacs.d/elisp/init-pyim.el" src emacs-lisp :range-begin "PyimBaseDictPac" :range-end "-PyimBaseDictPac" :lines "62-65"
** EPaint
   [[https://github.com/chuntaro/epaint][EPaint]], a simple paint tool for emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-epaint.el" src emacs-lisp :range-begin "EPaintPac" :range-end "-EPaintPac" :lines "44-54"
** Tetris
   Although [[https://www.emacswiki.org/emacs/TetrisMode][Tetris]] is part of Emacs, but there still could be some configurations.
   #+INCLUDE: "~/.emacs.d/elisp/init-games.el" src emacs-lisp :range-begin "TetrisConfig" :range-end "-TetrisConfig" :lines "41-54"
** Speed Type
   [[https://github.com/hagleitn/speed-type][Speed type]], a game to practice touch/speed typing in Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-games.el" src emacs-lisp :range-begin "SpeedTypePac" :range-end "-SpeedTypePac" :lines "57-59"
** 2048 Game
   [[https://bitbucket.org/zck/2048.el][2048 Game]], an implementation of 2048 in Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-games.el" src emacs-lisp :range-begin "2048Pac" :range-end "-2048Pac" :lines "62-64"
** Zone
   [[https://www.emacswiki.org/emacs/ZoneMode][Zone]], a minor-mode 'zones' Emacs out, choosing one of its random modes to obfuscate the current buffer.
   #+INCLUDE: "~/.emacs.d/elisp/init-zone.el" src emacs-lisp :range-begin "ZonePac" :range-end "-ZonePac" :lines "41-55"
