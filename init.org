#+EXPORT_FILE_NAME: README
* M-EMACS
* Why EMACS
Emacs transforms your approach to programming.

Emacs is *entirely introspectable*, allowing you to easily discover, "What code executes when I press this button?" This level of insight promotes an understanding of your work and deepens your engagement with the code.

Emacs serves as an *incremental programming environment*. You can avoid the traditional edit-compile-run cycle, which often interrupts workflow. Instead, you can write and execute small snippets of code, gradually developing them into a complete project without the need to switch contexts. The lines between your editor and interpreter blur seamlessly.

Emacs offers a *mutable environment*. You can modify variables, adjust functions with advice, or even redefine entire functions on the fly. This flexibility ensures that everything is open for customization, empowering you to create an environment tailored to your needs.

Emacs delivers *integrated functionality without the need for applications*. Instead of relying on disparate applications, all features are cohesively bundled within your Emacs instance. This means you can leverage the same snippet tool for writing C++ classes or crafting emails, enhancing efficiency and coherence in your tasks.

Emacs is rich with *innovative software concepts that have yet to gain mainstream traction*. Highlights include:
- While most platforms are limited to a single-item clipboard, Emacs boasts an *infinite clipboard*, allowing for more fluid copying and pasting.
- If you undo a change and then keep editing, many applications restrict you from redoing the original change. In contrast, Emacs enables *undoing to any historical state*, supporting a tree-based exploration of your editing history.
- With Emacs, you can perform a *reverse variable search*, making it possible to find variables set to a specific value.
- It facilitates *structural editing* of code, enabling you to make changes without breaking the syntax, effective for both Lisp (using paredit) and non-Lisp languages (using smartparens).
- Many applications employ a modal GUI where certain tasks block other edits, such as during a find-and-replace operation. Emacs, however, provides *recursive editing*, allowing you to pause your current task, perform other edits, and then return to where you left off.

Emacs fosters a *rich documentation culture*. It includes an extensive usage manual, a Lisp programming manual, in-depth docstrings, and even an interactive tutorial, ensuring that help is always readily available.

Emacs also boasts a *broad ecosystem*. Whatever niche programming language you wish to work with, there’s likely an Emacs package available for it, enhancing its versatility.

While Emacs certainly isn’t the only tool with valuable features, we believe that the [[https://i.stack.imgur.com/7Cu9Z.jpg][Emacs learning curve]] is well worth the investment.

/This section was based on [[https://github.com/remacs/remacs][Remacs]]./
* Why M-EMACS
  M-EMACS is a customized GNU Emacs setup designed to enhance your experience while providing an easily navigable resource. Our detailed README includes nearly the entire configuration code, making it a valuable reference for users.

  I remember the challenges of finding a clear and well-organized configuration when I first started using Emacs. Often, source code comments can be hard to notice or insufficiently detailed. That's why I've created this README to offer clear, human-friendly explanations. This guide is perfect for beginners who are unsure where to start with their personal configuration. Feel free to explore this document and copy any part of it for your own use.

  This distribution is specifically designed and tested for GNU Emacs 26.1 and higher. However, we recommend using Emacs 29, the latest stable version, due to its significant core improvements that enhance the overall experience beyond M-EMACS.
  [[file:images/Sample.png]]
** Community Responses ❤️
   Some heartwarming responses from the Emacs community:
   - /"Actually I understated how much I liked reading through your config... What makes me excited about this config is the readability and possibility of extending in a similar way."/ -- from [[https://www.reddit.com/r/emacs/comments/eewwyh/officially_introducing_memacs/fc5x1lz?utm_source=share&utm_medium=web2x&context=3][u/Orgmonics]]
   - /"I have to say Matt's setup has the best clarity of all emacs setups I have ever tried. It's really a good template to develop your own emacs config. Thanks again..."/ -- from [[https://www.reddit.com/r/emacs/comments/eewwyh/officially_introducing_memacs/fbxk831?utm_source=share&utm_medium=web2x&context=3][u/fqye]]
   - /"Thanks for the fantastic emacs setup, I love emacs, but trying to get lsp working right was killing me, yours worked out of the box and all I had to do was add some bindings, it's really a time saver"/ -- from [[https://github.com/MatthewZMD/.emacs.d/issues/48#issuecomment-877827124][ahonnecke]]
   - /"Thank you for helping a guy out and for sharing this. I hope this evolves to be into something really big."/ -- from [[https://github.com/MatthewZMD/.emacs.d/issues/38#issuecomment-706657288][d3v-S]]
   - and more... Love you guys! ❤️❤️
** About README
   This README is originated from =init.org= that is generated using =M-x org-gfm-export-to-markdown=. Every block of code is generated through this function - it exports sections of code from the =elisp/= directory. You will not see their presence in =init.org=. This not only enables a cleaner organization but also significantly improves Emacs start-up time than the traditional /everything in an org file/ approach.
** Installation
   1. Install [[https://www.gnu.org/software/emacs/][GNU Emacs]].
      - (Optional) On Ubuntu, =emacs-snapshot= is a great way to get latest version of Emacs.
        #+BEGIN_SRC bash
          sudo add-apt-repository -y ppa:ubuntu-elisp
          sudo apt-get update
          sudo apt-get install emacs-snapshot
        #+END_SRC
      - (Optional) Build latest Emacs from source.
        #+BEGIN_SRC bash
          # Install essential build tools
          sudo apt-get install build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev gnutls-dev libgtk-3-dev git autoconf
          # Clone source
          git clone --depth=1 https://github.com/emacs-mirror/emacs.git
          # Go to source
          cd emacs/
          # Build Emacs
          ./autogen.sh
          ./configure --with-mailutils
          make
          # Install (optional)
          sudo make install
        #+END_SRC
   2. Clone this repo to =$HOME=.
      #+BEGIN_SRC bash
        git clone https://github.com/MatthewZMD/.emacs.d.git ~/.emacs.d
      #+END_SRC
   3. Ensure a stable connection to Github, then open Emacs.
   4. In your favorite browser, =Ctrl-f Prerequisite= through this README and follow the *Prerequisite* instructions.
   5. Restart Emacs.
** Modification
   You have the permission to use, modify, distribute in any way you want.

   However, what is /free/ stays /free/. After all, this is [[file:LICENSE][GPL]].

   *Remember* you must manually sync this README with all the new changes you made by:
   1. Please do *NOT* edit this =README.md= file, edit =init.org= instead!
   2. If you add a new mode, create a new =<file-name>.el= file in =elisp/= directory.
   3. Put =(require '<file-name>)= in [[file:init.el][init.el]] accordingly.
   4. Add =#+INCLUDE: "~/.emacs.d/elisp/<place-holder>.el" src emacs-lisp :range-begin "<start-line-wrapper-exclusive>" :range-end "<end-line-wrapper-exclusive>"= in the appropriate section in =init.org=.
   5. Enter =C-x C-s= to save and update =:lines=. (if you don't see the updated effect, run =M-x save-and-update-includes= manually)
   6. Call =M-x org-gfm-export-to-markdown= to update =README.md= automatically.
** Contribution
   If you spotted a bug or you have any suggestions, please fill in an issue. If you have something to fix, feel free to create a pull request.
** Special Thanks
   Everyone starts somewhere, and I started here.
  - [[https://github.com/seagle0128/.emacs.d][Vincent Zhang's Centaur Emacs]]
  - [[https://github.com/hlissner/doom-emacs][Henrik Lissner's Doom Emacs]]
  - [[https://github.com/poncie/.emacs.d][Poncie Reyes's .emacs.d]]
* Startup
** Lexical Binding
   Enable lexical binding for better variable scoping. [[https://nullprogram.com/blog/2016/12/22/][Why?]]
   #+BEGIN_QUOTE
   Until Emacs version 24.1 (June 2012), Elisp predominantly utilized dynamically scoped variables, a characteristic common in older Lisp dialects. While dynamic scope has its specific applications, it is generally deemed unsuitable for local variables, and very few modern programming languages embrace it.
   #+END_QUOTE
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :lines "1-2"
** Early Init
   Emacs 27 introduces =early-init.el=, a configuration file that executes prior to =init.el=, coinciding with package and UI initialization.
*** Compatibility With 26
   Ensure the configuration accommodates both versions by checking if the =emacs-version >= 26= and manually requiring =early-init= settings if =emacs-version < 27=.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "CheckVer" :range-end "-CheckVer" :lines "39-51"
*** Defer Garbage Collection
   Postpone garbage collection earlier in the startup sequence to improve performance, as highlighted by [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][hlissner]].
   #+BEGIN_QUOTE
   Garbage collection can significantly slow down startup time, often doubling it. The key is to raise the memory threshold as early as possible.
   #+END_QUOTE
   #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "DeferGC" :range-end "-DeferGC" :lines "40-41"
*** Disable =package-enable-at-startup=
   Package initialization occurs automatically before loading the user configuration, which means we need to prevent Emacs from executing it prematurely.
   #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetPES" :range-end "-UnsetPES" :lines "44-45"
*** Unset =file-name-handler-alist=
   During startup, Emacs doesn't require specific file handlers for every file it opens or loads; thus, we should unset this list to optimize the startup process.
   #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetFNHA" :range-end "-UnsetFNHA" :lines "48-50"
*** Disable =site-run-file=
   #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "UnsetSRF" :range-end "-UnsetSRF" :lines "53-54"
*** Disable Unnecessary Interface
   Disabling unnecessary interfaces at this stage enhances speed before they are initialized.
   #+INCLUDE: "~/.emacs.d/early-init.el" src emacs-lisp :range-begin "DisableUnnecessaryInterface" :range-end "-DisableUnnecessaryInterface" :lines "57-62"
** Garbage Collection
*** Adjust =gc-cons-threshold= for Interactive Use
   A excessively high =gc-cons-threshold= can lead to freezing and stuttering during prolonged interactive sessions. If stuttering occurs, increase the threshold; if freezing happens, decrease it.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "BetterGC" :range-end "-BetterGC" :lines "54-64"
   Additionally, enabling garbage collection when Emacs loses focus and minimizing it during the use of the minibuffer can enhance responsiveness.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "AutoGC" :range-end "-AutoGC" :lines "67-84"
** Load Path
   Since all configuration files reside in the =elisp/= directory, it is essential to include this path in the =load-path= to ensure proper loading.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "LoadPath" :range-end "-LoadPath" :lines "87-101"
** Define Constants
   #+INCLUDE: "~/.emacs.d/elisp/init-const.el" src emacs-lisp :range-begin "Consts" :range-end "-Consts" :lines "44-76"
** Load Private File
   The =init-private.el= file has been designated within the =user-emacs-directory= for personal configurations you wish to keep outside source control.
   #+INCLUDE: "~/.emacs.d/init.el" src emacs-lisp :range-begin "InitPrivate" :range-end "-InitPrivate" :lines "217-220"
* Package Management
   Some packages are disabled using the =:disabled= tag due to infrequent usage. You can similarly disable packages as needed:
   #+begin_src emacs-lisp
   (use-package foo
     :disabled)
   #+end_src
** Straight
   [[https://github.com/radian-software/straight.el][Straight]] is preferred over =package.el= for its declarative and reproducible configuration, ensuring reliable package management and easy updates by utilizing Git for version tracking.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "StraightBootstrap" :range-end "-StraightBootstrap" :lines "40-54"
** Use Package
   [[https://github.com/jwiegley/use-package][Use-package]] simplifies Emacs package configuration, enhancing performance and clarity. When paired with straight.el, it allows for quick and seamless package management.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "StraightUsePackage" :range-end "-StraightUsePackage" :lines "57-68"
** Diminish
   [[https://github.com/emacsmirror/diminish][Diminish]] can remove certain minor modes from the mode-line to declutter the interface.
   #+INCLUDE: "~/.emacs.d/elisp/init-package.el" src emacs-lisp :range-begin "DimPac" :range-end "-DimPac" :lines "71-72"
* Global Functionalities
** User Information
   *Prerequisite*: 
   - Feel free to update this section with your information
   #+INCLUDE: "~/.emacs.d/elisp/init-const.el" src emacs-lisp :range-begin "UserInfo" :range-end "-UserInfo" :lines "39-41"
** Bindings
   #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "DefBindings" :range-end "-DefBindings" :lines "47-64"
** Avy
   [[https://github.com/abo-abo/avy][Avy]] offers an efficient method for navigating text. 
   #+INCLUDE: "~/.emacs.d/elisp/init-avy.el" src emacs-lisp :range-begin "AvyPac" :range-end "-AvyPac" :lines "42-52"
** Crux
   [[https://github.com/bbatsov/crux][Crux]] is a collection of incredibly useful extensions for Emacs, enhancing functionality and ease of use.
   #+INCLUDE: "~/.emacs.d/elisp/init-crux.el" src emacs-lisp :range-begin "CruxPac" :range-end "-CruxPac" :lines "39-50"
** Ivy, Amx, Counsel, Swiper
   [[https://github.com/abo-abo/swiper][Ivy]] is a versatile completion mechanism for Emacs. It incorporates tools such as [[https://github.com/DarwinAwardWinner/amx][Amx]], [[https://github.com/abo-abo/swiper][Counsel]], and [[https://github.com/abo-abo/swiper][Swiper]] to enhance the user experience.
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "IvyPac" :range-end "-IvyPac" :lines "42-71"
** Color Ripgrep
   [[https://github.com/manateelazycat/color-rg][Color rg]] is a search and refactoring tool built on /ripgrep/, designed to search text efficiently.
   *Prerequisite*: Ensure that [[https://github.com/BurntSushi/ripgrep#installation][ripgrep]] is installed and the `rg` command is included in your `PATH`.
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "ColorRGPac" :range-end "-ColorRGPac" :lines "74-78"
** Find File In Project
   [[https://github.com/technomancy/find-file-in-project][Find File In Project]] provides quick access to files within a project in Emacs.
   *Prerequisite*: Ensure `GNU Find` is in your `PATH`, and install [[https://github.com/bmatzelle/gow][Gow]], Cygwin, or MSYS2 on Windows to use this feature.
   #+INCLUDE: "~/.emacs.d/elisp/init-search.el" src emacs-lisp :range-begin "FFIPPac" :range-end "-FFIPPac" :lines "81-88"
** Files Directories
*** Dired
    Dired serves as the directory editor in Emacs, facilitating file management.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "DiredPackage" :range-end "-DiredPackage" :lines "39-71"
*** Disk Usage
    [[https://gitlab.com/ambrevar/emacs-disk-usage][Disk Usage]] is a file system analyzer that provides a tabulated view of file listings sorted by size, helping you manage disk space.
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "DiskUsage" :range-end "-DiskUsage" :lines "74-76"
*** Save All Buffers
    #+INCLUDE: "~/.emacs.d/elisp/init-dired.el" src emacs-lisp :range-begin "SaveAllBuffers" :range-end "-SaveAllBuffers" :lines "79-85"
** Winner
   Winner mode allows you to restore previous window layouts, providing a quick way to manage your workspace.
   #+INCLUDE: "~/.emacs.d/elisp/init-winner.el" src emacs-lisp :range-begin "WinnerPac" :range-end "-WinnerPac" :lines "39-55"
** Which Key
   [[https://github.com/justbur/emacs-which-key][Which Key]] displays key bindings that follow an incomplete command, enhancing usability by reminding users of available options.
   #+INCLUDE: "~/.emacs.d/elisp/init-which-key.el" src emacs-lisp :range-begin "WhichKeyPac" :range-end "-WhichKeyPac" :lines "39-46"
** Undo Tree
   [[https://www.emacswiki.org/emacs/UndoTree][Undo tree]] visualizes the history of changes made in a file, making it easier to manage and navigate undo operations.
   #+INCLUDE: "~/.emacs.d/elisp/init-undo-tree.el" src emacs-lisp :range-begin "UndoTreePac" :range-end "-UndoTreePac" :lines "39-47"
** Discover My Major
   [[https://github.com/jguenther/discover-my-major][Discover my major]] helps you explore key bindings and their meanings for the current Emacs major mode, which enhances the learning experience.
   #+INCLUDE: "~/.emacs.d/elisp/init-discover-my-major.el" src emacs-lisp :range-begin "DiscMyMajor" :range-end "-DiscMyMajor" :lines "39-41"
** Ace Window
   [[https://github.com/abo-abo/ace-window][Ace Window]] enables you to efficiently select and switch between windows in Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-ace-window.el" src emacs-lisp :range-begin "AceWindowPac" :range-end "-AceWindowPac"  :lines "39-41"
** Terminal
*** Vterm
    [[https://github.com/akermu/emacs-libvterm][Vterm]] is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "VTermPac" :range-end "-VTermPac" :lines "90-102"
*** Shell Here
    [[https://github.com/ieure/shell-here][Shell Here]] opens a shell buffer within the context of the current `default-directory`, providing quick terminal access.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "ShellHerePac" :range-end "-ShellHerePac" :lines "42-47"
*** Multi Term
    [[https://github.com/manateelazycat/multi-term][Multi Term]] is a terminal management mode that allows you to handle multiple terminal buffers conveniently within Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "MultiTermPac" :range-end "-MultiTermPac" :lines "50-80"
*** Term Keys
    [[https://github.com/CyberShadow/term-keys][Term Keys]] provides seamless keyboard input for Emacs in terminal emulators, ensuring consistent performance.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "TermKeysPac" :range-end "-TermKeysPac" :lines "83-87"
*** Exec Path From Shell
    [[https://github.com/purcell/exec-path-from-shell][Exec Path From Shell]] ensures that environment variables in Emacs match those of the user's shell, maintaining consistency across different environments.
    #+INCLUDE: "~/.emacs.d/elisp/init-shell.el" src emacs-lisp :range-begin "ExecPathFromShellPac" :range-end "-ExecPathFromShellPac" :lines "105-115"
** Sudo Edit
   [[https://github.com/nflath/sudo-edit][Sudo Edit]] allows you to open files with `sudo`, enabling easier access to protected files.
   #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "SudoEditPac" :range-end "-SudoEditPac" :lines "42-44"
** Ibuffer
   [[https://www.emacswiki.org/emacs/IbufferMode][Ibuffer]] is an advanced alternative to BufferMenu that allows you to manage buffers similarly to how Dired handles files, vastly improving efficiency.
   It integrates with [[https://github.com/purcell/ibuffer-vc][IBuffer VC]], which groups buffers by git project and displays file state.
   #+INCLUDE: "~/.emacs.d/elisp/init-buffer.el" src emacs-lisp :range-begin "IBufferPac" :range-end "-IBufferPac" :lines "39-59"
** Config
   A collection of essential configurations that greatly enhance usability and productivity.
*** UTF-8 Coding System
    Configure Emacs to utilize UTF-8 encoding with Unix line endings for optimal compatibility.
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "UTF8Coding" :range-end "-UTF8Coding" :lines "67-78"
*** Optimize Editing Experience
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "EditExp" :range-end "-EditExp" :lines "81-123"
*** History
    This section manages aspects of the editing history to enhance user experience.
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "History" :range-end "-History" :lines "126-150"
*** Small Configs
    #+INCLUDE: "~/.emacs.d/elisp/init-global-config.el" src emacs-lisp :range-begin "SmallConfigs" :range-end "-SmallConfigs" :lines "153-204"
** Functions
   A selection of important functions to streamline your workflow.
*** Resize Window Width / Height Functions
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "ResizeWidthheight" :range-end "-ResizeWidthheight" :lines "42-98"
*** Edit This Configuration File Shortcut
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "EditConfig" :range-end "-EditConfig" :lines "101-107"
*** Update Org Mode Include Automatically
    Automatically updates Org Mode INCLUDE statements based on guidance from [[http://endlessparentheses.com/updating-org-mode-include-statements-on-the-fly.html][Artur Malabarba]].
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "OrgIncludeAuto" :range-end "-OrgIncludeAuto" :lines "110-155"
*** MiniBuffer Functions
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "BetterMiniBuffer" :range-end "-BetterMiniBuffer" :lines "158-167"
*** Display Line Overlay
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "DisplayLineOverlay" :range-end "-DisplayLineOverlay" :lines "170-182"
*** Read Lines From File
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "ReadLines" :range-end "-ReadLines" :lines "185-189"
*** Where Am I
    #+INCLUDE: "~/.emacs.d/elisp/init-func.el" src emacs-lisp :range-begin "WhereAmI" :range-end "-WhereAmI" :lines "192-196"
* UI Enhancements
** Doom Themes
   [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]] is a powerful UI plugin that provides a comprehensive collection of themes to enhance visual aesthetics in Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-theme.el" src emacs-lisp :range-begin "DoomThemes" :range-end "-DoomThemes" :lines "43-58"
** Doom Modeline
   [[https://github.com/seagle0128/doom-modeline][Doom Modeline]] offers a feature-rich modeline, inspired by DOOM Emacs, that is both faster and more powerful than traditional modelines.
   #+INCLUDE: "~/.emacs.d/elisp/init-theme.el" src emacs-lisp :range-begin "DoomModeline" :range-end "-DoomModeline" :lines "61-71"
** Dashboard
*** Dashboard
    [[https://github.com/rakanalh/emacs-dashboard][Dashboard]] is an extensible startup screen for Emacs, providing a customizable interface when launching the application.
    Choose either =KEC_Dark_BK.png= or =KEC_Light_BK.png= depending on your preferred background theme.
    #+INCLUDE: "~/.emacs.d/elisp/init-dashboard.el" src emacs-lisp :range-begin "DashboardPac" :range-end "-DashboardPac" :lines "39-83"
*** Page Break Lines
    [[https://github.com/purcell/page-break-lines][Page-break-lines]] displays form feed characters as clean, horizontal rules, improving readability.
    #+INCLUDE: "~/.emacs.d/elisp/init-dashboard.el" src emacs-lisp :range-begin "PBLPac" :range-end "-PBLPac" :lines "86-89"
** Fonts and Icons
   *Prerequisite*: Install all available fonts and icons from the `fonts/` directory. Then execute =M-x all-the-icons-install-fonts= and =M-x nerd-icons-install-fonts= to apply them.
*** Fonts
    #+INCLUDE: "~/.emacs.d/elisp/init-fonts.el" src emacs-lisp :range-begin "FontsList" :range-end "-FontsList" :lines "39-42"
    Function dedicated to switching between installed fonts seamlessly.
    #+INCLUDE: "~/.emacs.d/elisp/init-fonts.el" src emacs-lisp :range-begin "FontFun" :range-end "-FontFun" :lines "45-69"
*** All The Icons
    [[https://github.com/domtronn/all-the-icons.el][All The Icons]] is a utility package designed to aggregate various icon fonts, specifically for GUI Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-fonts.el" src emacs-lisp :range-begin "ATIPac" :range-end "-ATIPac" :lines "72-73"
** Smooth Scrolling
   Configuration settings are provided to enable smooth scrolling in Emacs, enhancing reading and navigation comfort.
   #+INCLUDE: "~/.emacs.d/elisp/init-scroll.el" src emacs-lisp :range-begin "SmoothScroll" :range-end "-SmoothScroll" :lines "39-52"
** Highlight Lines
   #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "Highlight" :range-end "-Highlight" :lines "43-44"
** Prettify Symbols
   [[https://www.emacswiki.org/emacs/PrettySymbol][Prettify symbols mode]] is a built-in feature that enables the display of character sequences as aesthetically pleasing symbols, improving code readability.
   #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "PreSym" :range-end "-PreSym" :lines "47-61"
** UI Configs
*** Title Bar
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "TitleBar" :range-end "-TitleBar" :lines "64-65"
*** Simplify Yes/No Prompts
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "YorN" :range-end "-YorN" :lines "68-70"
*** Disable Splash Screen
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "StartupScreen" :range-end "-StartupScreen" :lines "73-77"
*** Line Numbers
    Configure Emacs to display both line and column numbers in the modeline for better code navigation.
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "DisLineNum" :range-end "-DisLineNum" :lines "80-87"
*** Modeline Time and Battery
    This feature displays time and battery statistics in the modeline, providing useful information at a glance.
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "DisTimeBat" :range-end "-DisTimeBat" :lines "90-94"
*** Pixel Scroll Precision Mode
    Pixel scroll precision mode, introduced in Emacs 29.1, enables finer scrolling control within a buffer, displaying content pixel-by-pixel for increased precision.
    #+INCLUDE: "~/.emacs.d/elisp/init-ui-config.el" src emacs-lisp :range-begin "PixelScrollPrecMode" :range-end "-PixelScrollPrecMode" :lines "97-99"
* General Programming
** Aidermacs
   [[https://github.com/MatthewZMD/aidermacs][Aidermacs]], Aider AI Pair Programming for Emacs
   #+INCLUDE: "~/.emacs.d/elisp/init-llm.el" src emacs-lisp :range-begin "AidermacsPac" :range-end "-AidermacsPac" :lines "47-61"

** Magit
   [[https://magit.vc/][Magit]] provides a user-friendly interface for interacting with the Git version control system, streamlining version management tasks.
   #+INCLUDE: "~/.emacs.d/elisp/init-magit.el" src emacs-lisp :range-begin "MagitPac" :range-end "-MagitPac" :lines "39-50"
** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a powerful project interaction library that simplifies navigating and managing projects in Emacs.
   *Prerequisite*: For Windows OS users, install [[https://github.com/bmatzelle/gow/releases][Gow]] and ensure it is added to the `PATH`.
   [[https://github.com/bmatzelle/gow][Gow]] is a handy lightweight installer that facilitates the use of various open source UNIX applications compiled as native Win32 binaries. The `tr` command is particularly needed for Projectile's alien indexing.
   #+INCLUDE: "~/.emacs.d/elisp/init-projectile.el" src emacs-lisp :range-begin "ProjPac" :range-end "-ProjPac" :lines "42-53"
** YASnippet
*** YASnippet
    [[https://github.com/joaotavora/yasnippet][YASnippet]] is a versatile programming template system for Emacs. It can load [[https://github.com/AndreaCrotti/yasnippet-snippets][YASnippet Snippets]], which is a rich collection of snippets for a variety of languages.
    #+INCLUDE: "~/.emacs.d/elisp/init-yasnippet.el" src emacs-lisp :range-begin "YASnippetPac" :range-end "-YASnippetPac" :lines "39-60"
** Treesit Parser Manager
   [[https://github.com/renzmann/treesit-auto][treesit-auto]] simplifies installation/management of tree-sitter grammars. Automatically handles grammar compilation/updates for multiple languages.
   
   *Prerequisite*: Run =M-x treesit-auto-install-all= to install grammars.
   
   #+BEGIN_QUOTE
   This package is, admittedly, a hack. treesit.el provides an excellent foundation for incremental source code parsing in Emacs 29. Over time this foundation will expand into an improved core editing experience. While this package will likely become obsolete in Emacs 30+ (which may have built-in alternatives), it still provides quality-of-life improvements for Emacs 29 users.
   #+END_QUOTE
   
   #+INCLUDE: "~/.emacs.d/elisp/init-treesit.el" src emacs-lisp :range-begin "TreesitAutoPac" :range-end "-TreesitAutoPac" :lines "42-58"
** Dumb Jump
   [[https://github.com/jacktasia/dumb-jump][Dumb jump]] allows for swift navigation to definition within your codebase, enhancing the coding experience.
   #+INCLUDE: "~/.emacs.d/elisp/init-dumb-jump.el" src emacs-lisp :range-begin "DumbJump" :range-end "-DumbJump" :lines "39-46"
** Parenthesis
*** Smartparens
    [[https://github.com/Fuco1/smartparens][Smartparens]] is a minor mode designed for effectively handling paired constructs, streamlining coding involving parentheses and brackets.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "SmartParensPac" :range-end "-SmartParensPac" :lines "57-78"
*** Match Parenthesis
    This feature ensures that parentheses are matched and automatically paired while providing visual cues even when they are offscreen, enhancing code clarity. 
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "MatchParens" :range-end "-MatchParens" :lines "81-120"
** Indentation
   [[https://github.com/jdtsmith/indent-bars][Indent Bars]] is a customizable indentation guide that provides fast and efficient visual cues for code structure in Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-indent.el" src emacs-lisp :range-begin "IndentBarsPac" :range-end "-IndentBarsPac" :lines "39-56"
   This section also covers indentation configuration for optimal coding experiences.
   #+INCLUDE: "~/.emacs.d/elisp/init-indent.el" src emacs-lisp :range-begin "IndentConfig" :range-end "-IndentConfig" :lines "59-76"
** Format All
   [[https://github.com/lassik/emacs-format-all-the-code][Format all]] provides a convenient feature to auto-format source code, catering to numerous programming languages.
   *Prerequisite*: Consult [[https://github.com/lassik/emacs-format-all-the-code#supported-languages][Supported Languages]] to identify which additional tools are necessary for specific languages.
   #+INCLUDE: "~/.emacs.d/elisp/init-format.el" src emacs-lisp :range-begin "FormatAllPac" :range-end "-FormatAllPac" :lines "39-41"
** Ediff
   [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] enables users to compare differences between pairs of files or buffers simultaneously, streamlining the process of resolving discrepancies.
   #+INCLUDE: "~/.emacs.d/elisp/init-format.el" src emacs-lisp :range-begin "EdiffPac" :range-end "-EdiffPac" :lines "44-48"

** Package Lint
   [[https://github.com/purcell/package-lint][Package Lint]] checks the current buffer for package.el formatting issues, ensuring your Emacs Lisp packages follow best practices and meet the requirements for submission to MELPA or GNU ELPA.
   #+INCLUDE: "~/.emacs.d/elisp/init-format.el" src emacs-lisp :range-begin "PackageLintPac" :range-end "-PackageLintPac" :lines "51-53"

** Evil Nerd Commenter
   [[https://github.com/redguardtoo/evil-nerd-commenter][Evil Nerd Commenter]] assists users in efficiently commenting out sections of code, enhancing productivity when writing or debugging.
   #+INCLUDE: "~/.emacs.d/elisp/init-comment.el" src emacs-lisp :range-begin "EvilNerdCommenPac" :range-end "-EvilNerdCommenPac" :lines "39-43"
** Editing
*** Iedit
    [[https://github.com/victorhge/iedit][Iedit]] is a versatile minor mode that facilitates simultaneous editing of multiple regions within a buffer or a selected region, streamlining the editing process.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "IEditPac" :range-end "-IEditPac" :lines "41-44"
*** Delete Block
    [[https://github.com/manateelazycat/delete-block][Delete Block]] provides an efficient method for deleting blocks of text or code, promoting a smoother editing workflow.
    #+INCLUDE: "~/.emacs.d/elisp/init-edit.el" src emacs-lisp :range-begin "DeleteBlockPac" :range-end "-DeleteBlockPac" :lines "47-54"
** Headers
   [[https://www.emacswiki.org/emacs/header2.el][Header2]] simplifies the process of creating and updating file headers, automating documentation tasks.
   #+INCLUDE: "~/.emacs.d/elisp/init-header.el" src emacs-lisp :range-begin "Header2Pac" :range-end "-Header2Pac" :lines "39-48"
** Jupyter Notebook
   [[https://github.com/millejoh/emacs-ipython-notebook][Emacs IPython Notebook]] serves as a client for [[https://jupyter.org/][Jupyter]], previously known as IPython, allowing for interactive coding sessions within Emacs.
*** Usage
    1. Execute =M-x ein:run= to initiate a local Jupyter session.
    2. Login with =M-x ein:login= to connect to a local or remote session.
    3. Open a =.ipynb= file and press =C-c C-o=.
    #+INCLUDE: "~/.emacs.d/elisp/init-ein.el" src emacs-lisp :range-begin "EINPac" :range-end "-EINPac" :lines "39-49"
** Completion / LSP
   Instead of the widely-used [[http://company-mode.github.io/][Company]], I have chosen to use [[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]], which is entirely multi-threaded and adept at handling all completion needs within Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-complete.el" src emacs-lisp :range-begin "LSPPac" :range-end "-LSPPac" :lines "42-78"
* Programming
** C/C++/Objective C
   *Prerequisite*: Since all completion features are supported by [[https://github.com/emacs-lsp/lsp-mode][LSP Mode]], it needs to be set up correctly.
   - Install [[https://cmake.org/download/][CMake]] version 3.8 or higher for all operating systems.
   - For Unix-like OS:
     - It is recommended to use [[https://github.com/MaskRay/ccls][CCLS]] as the LSP server. Refer to [[https://github.com/MaskRay/ccls/wiki/Build][build instructions]] for detailed setup.
     - Set `ccls-executable` to the directory where your CCLS is built.
   - For Windows OS:
     - Install [[http://www.mingw.org/wiki/Install_MinGW][MinGW]] for compilation.
     - Due to the complexities of building CCLS on Windows, it is advisable to install [[https://clang.llvm.org/extra/clangd/Installation.html][Clangd]] instead and ensure it is available in your `PATH`.
*** CCLS
    [[https://github.com/MaskRay/emacs-ccls][Emacs CCLS]] is a client for [[https://github.com/MaskRay/ccls][CCLS]], which is a language server for C/C++/Objective-C. It supports massive codebases, leveraging the capabilities of libclang for enhanced performance.
    #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "CCLSPac" :range-end "-CCLSPac" :lines "42-64"
*** Modern C++ Font Lock
    [[https://github.com/ludwigpacifici/modern-cpp-font-lock][Modern CPP Font Lock]] enhances syntax highlighting specifically for modern C++ syntax, improving readability and code comprehension.
    #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "CPPFontLockPac" :range-end "-CPPFontLockPac" :lines "67-70"
** Golang
   [[https://github.com/dominikh/go-mode.el][Go Mode]] is an Emacs mode specifically designed for Golang programming, providing syntax highlighting and other essential tools.
   *Prerequisite*: Setting up [[https://github.com/golang/tools/blob/master/gopls/README.md][gopls]] is necessary for Golang's LSP support.
   #+BEGIN_SRC bash
     go get golang.org/x/tools/gopls@latest
   #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "GoPac" :range-end "-GoPac" :lines "73-77"
** Rust
   [[https://github.com/rust-lang/rust-mode][Rust Mode]] is tailored for Rust programming within Emacs, ensuring robust development support.
   #+INCLUDE: "~/.emacs.d/elisp/init-cc.el" src emacs-lisp :range-begin "RustPac" :range-end "-RustPac" :lines "80-91"
** Python
   #+INCLUDE: "~/.emacs.d/elisp/init-python.el" src emacs-lisp :range-begin "PythonConfig" :range-end "-PythonConfig" :lines "42-49"
** ESS
   [[https://ess.r-project.org/][Emacs Speaks Statistics]] (ESS) is designed to facilitate editing scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata, and OpenBUGS/JAGS.
   *Prerequisite*: Ensure [[https://cran.r-project.org/mirrors.html][R]] is installed to utilize ESS effectively with R.
   #+INCLUDE: "~/.emacs.d/elisp/init-ess.el" src emacs-lisp :range-begin "ESSPac" :range-end "-ESSPac" :lines "39-44"
** TeX
   *Prerequisite*: Please ensure you have [[https://www.tug.org/texlive/quickinstall.html][TeX Live]] installed on your system.
*** AUCTeX
    [[https://www.gnu.org/software/auctex/][AUCTeX]] is a comprehensive package designed for authoring and formatting TeX documents, supporting multiple TeX macro packages such as AMS-TEX, LaTeX, Texinfo, ConTEXt, and docTEX (dtx files).
    #+INCLUDE: "~/.emacs.d/elisp/init-latex.el" src emacs-lisp :range-begin "AUCTeXPac" :range-end "-AUCTeXPac" :lines "44-67"
** Yaml
   [[https://github.com/yoshiki/yaml-mode][Yaml mode]] is the dedicated major mode for editing files in the YAML data serialization format within Emacs.
   #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "YamlPac" :range-end "-YamlPac" :lines "59-93"
*** Yaml-Pro
    [[https://github.com/zkry/yaml-pro][Yaml-pro]] contains tools for editing YAML leveraging tree-sitter/parser.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "YamlProPac" :range-end "-YamlProPac" :lines "96-100"
** Buildsystem
*** Docker
    [[https://github.com/Silex/docker.el][Docker]] is a mode enabling management of Docker containers directly from Emacs, facilitating container-based workflows.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "DockerPac" :range-end "-DockerPac" :lines "39-40"
    [[https://github.com/spotify/dockerfile-mode][Dockerfile Mode]] offers specific features for editing Dockerfiles in Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "DockerfilePac" :range-end "-DockerfilePac" :lines "43-44"
*** Groovy
    [[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][Groovy Mode]] encompasses a comprehensive major mode for Groovy, grails minor mode, and a groovy inferior mode, catering to Groovy developers.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "GroovyPac" :range-end "-GroovyPac" :lines "47-48"
*** Cmake
    [[https://melpa.org/#/cmake-mode][Cmake Mode]] is a library that provides syntax highlighting and indentation functionalities for CMakeLists.txt and *.cmake files.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "CmakePac" :range-end "-CmakePac" :lines "51-52"
*** Bazel
    [[https://github.com/bazelbuild/emacs-bazel-mode][Bazel Mode]] grants major modes for editing Bazel-specific files including =BUILD= files, =WORKSPACE= files, and =.bazelrc= files, as well as Starlark files.
    #+INCLUDE: "~/.emacs.d/elisp/init-buildsystem.el" src emacs-lisp :range-begin "BazelPac" :range-end "-BazelPac" :lines "55-56"
* Web Development
   *Prerequisite*: Install [[https://nodejs.org/en/download/][NodeJS]] and ensure it is included in your `PATH`. Execute the following commands to enable LSP for JavaScript, TypeScript, and HTML:
   #+BEGIN_SRC bash
      npm i -g typescript
      npm i -g typescript-language-server
   #+END_SRC
** Web
   [[https://github.com/fxbois/web-mode][Web mode]] is a specialized major mode designed for editing web templates and related technologies.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "WebModePac" :range-end "-WebModePac" :lines "39-46"
** JavaScript/TypeScript
*** JavaScript2
    [[https://github.com/mooz/js2-mode][JS2 mode]] provides an enhanced JavaScript editing experience with features aimed at improving productivity.
    #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "Js2Pac" :range-end "-Js2Pac" :lines "49-53"
*** TypeScript
    [[https://github.com/emacs-typescript/typescript.el][TypeScript mode]] adds dedicated support for TypeScript programming within Emacs, enhancing the development experience.
    #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "TypeScriptPac" :range-end "-TypeScriptPac" :lines "56-59"
*** Vue
    [[https://github.com/AdamNiederer/vue-mode][Vue mode]] provides specialized major mode for developing applications using Vue.js, improving the coding workflow.
    #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "VuePac" :range-end "-VuePac" :lines "62-65"
** Emmet
   [[https://github.com/smihica/emmet-mode][Emmet]] enables users to write HTML swiftly using CSS-style selectors, enhancing coding efficiency. Refer to [[https://github.com/smihica/emmet-mode#usage][usage instructions]] for further information.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "EmmetPac" :range-end "-EmmetPac" :lines "68-71"
** Instant Rename Tag
   [[https://github.com/manateelazycat/instant-rename-tag][Instant Rename Tag]] offers the functionality to quickly rename HTML tag pairs, serendipitously speeding up markup editing.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "InstantRenameTagPac" :range-end "-InstantRenameTagPac" :lines "74-77"
** JSON
   [[https://github.com/joshwnj/json-mode][JSON Mode]] is specifically crafted for editing JSON files, enhancing the formatting and navigation experience.
   #+INCLUDE: "~/.emacs.d/elisp/init-webdev.el" src emacs-lisp :range-begin "JsonPac" :range-end "-JsonPac" :lines "80-82"
* Office
** Org
   [[https://orgmode.org/][Org]] is a powerful built-in tool in Emacs for note-taking, maintaining TODO lists, project planning, and authoring documents in a fast and efficient plain-text format.
   *Prerequisite*: Configure =(org-agenda-files (list "~/org/agenda/"))= to specify your agenda folder for using org-agenda. Once this is configured, agenda items tagged with =DEADLINE= or =SCHEDULED= will show up on the [[Dashboard][Dashboard]], which will be updated to provide detailed insights in the [[https://github.com/MatthewZMD/.emacs.d/issues/37][future]].
   #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "OrgPac" :range-end "-OrgPac" :lines "39-87"
*** Org Roam
    [[https://www.orgroam.com/][Org Roam]] is a personal knowledge management system based on plain text, enabling collection and organization of ideas seamlessly.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "OrgRoamPac" :range-end "-OrgRoamPac" :lines "90-106"
*** HTMLize
    [[https://github.com/hniksic/emacs-htmlize][HTMLize]] is a powerful tool that converts buffer text and its decorations into HTML format, facilitating web integration.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "HTMLIZEPac" :range-end "-HTMLIZEPac" :lines "114-115"
*** GFM Exporter
    [[https://github.com/larstvei/ox-gfm][OX-GFM]] enables Org Mode to export documents into GitHub Flavored Markdown format, enhancing sharing capabilities.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "OXGFMPac" :range-end "-OXGFMPac" :lines "118-119"
*** PlantUML and Graphviz
    [[https://github.com/skuro/plantuml-mode][PlantUML Mode]] offers a dedicated environment for editing PlantUML sources.
    *Prerequisite*:
    1. Install [[http://plantuml.com/download][plantuml]] and configure =(org-plantuml-jar-path (expand-file-name "path/to/plantuml.jar"))= to specify its location.
    2. Additionally, install [[https://graphviz.gitlab.io/download/][Graphviz]] on your system to enable graph visualization. For example, use =sudo apt install graphviz= on Ubuntu to install it.
    #+INCLUDE: "~/.emacs.d/elisp/init-org.el" src emacs-lisp :range-begin "PlantUMLPac" :range-end "-PlantUMLPac" :lines "122-126"
* Multimedia
** EAF
   [[https://github.com/manateelazycat/emacs-application-framework][Emacs Application Framework]] revolutionizes graphical capabilities in Emacs by providing a comprehensive GUI application framework.
   *Prerequisite*: Ensure that =python3= and =pip3= are installed, then follow the [[https://github.com/manateelazycat/emacs-application-framework#install][installation instructions]] to get started.
   #+INCLUDE: "~/.emacs.d/elisp/init-eaf.el" src emacs-lisp :range-begin "EAFPac" :range-end "-EAFPac" :lines "43-105"
* Internet
** ERC
   [[https://www.emacswiki.org/emacs/ERC][Emacs Relay Chat]] is a modular, extensible IRC client for Emacs, supporting various functionalities like nickname highlighting through [[https://github.com/leathekd/erc-hl-nicks][erc-hl-nicks]] and image display via [[https://github.com/kidd/erc-image.el][erc-image]].
   *Prerequisite*: Add your IRC credentials to the file =~/.authinfo= and configure =my-irc-nick= to specify your IRC nickname.
   #+BEGIN_SRC text
     machine irc.freenode.net login <nickname> password <password> port 6697
   #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-erc.el" src emacs-lisp :range-begin "ERCPac" :range-end "-ERCPac" :lines "43-104"
** MU4E
   [[https://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]] is a robust email client within Emacs powered by [[https://www.djcbsoftware.nl/code/mu/][mu]] as its backend. It features [[https://github.com/rougier/mu4e-thread-folding][Mu4e Thread Folding]] for managing lengthy email threads efficiently.
   *Note*: This mu4e configuration is tailored specifically for Gmail users.
   *Prerequisite*:
   1. Set up IMAP using [[https://wiki.archlinux.org/index.php/Isync][isync/mbsync]] and place your =.mbsyncrc= config in =~/.emacs.d/mu4e/=. A [[https://gist.github.com/MatthewZMD/39cc00260486d17450f7228a4f36891f][sample]] configuration is available.
   2. Install [[https://www.djcbsoftware.nl/code/mu/][mu]] for email handling.
   3. Execute the following commands to initialize your email environment.
      #+BEGIN_SRC bash
        mkdir -p ~/Maildir/gmail/
        mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -Dmn gmail
        mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a
        mu init --maildir=~/Maildir/ --my-address=YOUR_EMAIL1 --my-address=YOUR_EMAIL2
        mu index
      #+END_SRC
      - If you encounter an =Invalid Credentials= error while confident of your password correctness, consult [[https://appuals.com/fix-your-imap-server-wants-to-alert-you-invalid-credentials/][this guide]] for troubleshooting.
   4. (Optional) To track meetings using =org-mode=, assign =gnus-icalendar-org-capture-file= to your designated meeting file.
   #+INCLUDE: "~/.emacs.d/elisp/init-mu4e.el" src emacs-lisp :range-begin "Mu4ePac" :range-end "-Mu4ePac" :lines "39-159"
** Tramp
   [[https://www.emacswiki.org/emacs/TrampMode][Tramp]] allows users to edit remote files seamlessly using various remote shell protocols (such as rlogin, telnet, or ssh).
*** Google Cloud Platform
    Connect to instances on Google Cloud Platform using the format:
    #+BEGIN_SRC text
      /gssh:some-instance:/path/to/file
    #+END_SRC
   #+INCLUDE: "~/.emacs.d/elisp/init-tramp.el" src emacs-lisp :range-begin "TrampPac" :range-end "-TrampPac" :lines "39-56"
** LeetCode
   [[https://github.com/kaiwk/leetcode.el][LeetCode]] is an Emacs client designed for interacting with LeetCode problem sets. Note that it depends on both [[https://github.com/skeeto/emacs-aio][aio]] and [[https://github.com/davazp/graphql-mode][GraphQL]] packages.
   #+INCLUDE: "~/.emacs.d/elisp/init-leetcode.el" src emacs-lisp :range-begin "LeetCodePac" :range-end "-LeetCodePac" :lines "42-51"
** Debbugs
   [[https://elpa.gnu.org/packages/debbugs.html][Debbugs]] is a package that grants access to the GNU Bug Tracker directly within Emacs, facilitating bug tracking processes.
   #+INCLUDE: "~/.emacs.d/elisp/init-debbugs.el" src emacs-lisp :range-begin "DebbugsPac" :range-end "-DebbugsPac" :lines "40-42"
** Hacker News
   A straightforward [[https://github.com/clarete/hackernews.el][Hacker News]] client for Emacs, enabling users to stay updated with the latest news from the platform.
   #+INCLUDE: "~/.emacs.d/elisp/init-hackernews.el" src emacs-lisp :range-begin "HackerNewsPac" :range-end "-HackerNewsPac" :lines "42-47"
** EWW
   Emacs Web Wowser (EWW) is a built-in HTML-based web browser for Emacs, allowing users to browse the web seamlessly.
   #+INCLUDE: "~/.emacs.d/elisp/init-eww.el" src emacs-lisp :range-begin "EWWPac" :range-end "-EWWPac" :lines "42-52"
* Miscellaneous
** Chinese
   This section includes packages and configurations tailored for Chinese users. Non-Chinese users can opt to disable these features by adding =:disabled= tags.
*** Pyim
    - [[https://github.com/tumashu/pyim][Pyim]] is a versatile Chinese Pinyin input method for Emacs, enhancing text input efficiency. It leverages the [[https://github.com/tumashu/posframe][posframe]] package for displaying candidate options.
    - [[https://github.com/tumashu/pyim-basedict][Pyim BaseDict]] serves as the default dictionary for Chinese-Pyim input.
    
    I have stopped using the recommended painless Chinese-English switching feature, as it's not very user-friendly for those needing to type in both languages simultaneously. Please use =C-\= for switching input methods if needed.
    #+INCLUDE: "~/.emacs.d/elisp/init-chinese.el" src emacs-lisp :range-begin "PyimPac" :range-end "-PyimPac" :lines "39-61"
*** Youdao
    [[https://github.com/xuchunyang/youdao-dictionary.el][Youdao]] provides an interface for leveraging Youdao's dictionary functionalities within Emacs.
    #+INCLUDE: "~/.emacs.d/elisp/init-chinese.el" src emacs-lisp :range-begin "YoudaoPac" :range-end "-YoudaoPac" :lines "64-69"
