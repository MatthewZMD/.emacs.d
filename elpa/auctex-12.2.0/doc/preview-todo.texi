@ifset rawfile
@include macros.texi
@chapheading Future Development of @previewlatex{}
@end ifset

@itemize @bullet

@item Support other formats than just @LaTeX{}

plain @TeX{} users and Con@TeX{}t users should not have to feel left
out.  While Con@TeX{}t is not supported yet by released versions of
@AUCTeX{}, at least supporting plain would help people, and be a start
for Con@TeX{}t as well.  There are plain-based formats like MusiX@TeX{}
that could benefit a lot from @previewlatex{}.  The main part of the
difficulties here is to adapt @file{preview.dtx} to produce stuff not
requiring @LaTeX{}.

@item Support nested snippets

Currently you can't have both a footnote (which gets displayed as just
its footnote number) and math inside of a footnote rendered as an image:
such nesting might be achieved by rerunning @previewlatex{} on the
footnote contents when one opens the footnote for editing.

@item Support other text properties than just images

Macros like @samp{\textit} can be rendered as images, but the resulting
humungous blob is not suitable for editing, in particular since the
line filling from LaTeX does not coincide with that of Emacs.  It would
be much more useful if text properties just switched the relevant font
to italics rather than replacing the whole text with an image.  It
would also make editing quite easier.  Then there are things like
footnotes that are currently just replaced by their footnote number.
While editing is not a concern here (the number is not in the original
text, anyway), it would save a lot of conversion time if no images were
generated, but Emacs just displayed a properly fontified version of the
footnote number.  Also, this might make @previewlatex{} useful even on
text terminals.

@item Find a way to facilitate Source Specials

Probably in connection with adding appropriate support to
@code{dvipng}, it would be nice if clicking on an image from a larger
piece of source code would place the cursor at the respective source
code location.

@item Make @file{preview.dtx} look reasonable in @AUCTeX{}

It is a bit embarrassing that @file{preview.dtx} is written in a manner
that will not give either good syntax highlighting or good indentation
when employing @AUCTeX{}.

@item Web page work

Currently, @previewlatex{}'s web page is not structured at all.  Better
navigation would be desirable, as well as separate News and Errata eye
catchers.

@item Manual improvements

@itemize @minus
@item Pepper the manual with screen shots and graphics

This will be of interest for the @acronym{HTML} and @TeX{} renditions
of the texinfo manual.  Since Texinfo now supports images as well, this
could well be nice to have.

@item Fix duplicates

Various stuff appears several times.

@end itemize

@item Implement rendering pipelines for Emacs

The current @file{gs.el} interface is fundamentally flawed, not only
because of a broken implementation.  A general batchable and
daemonizable rendering infrastructure that can work on all kinds of
preview images for embedding into buffers is warranted.  The current
implementation has a rather adhoc flavor and is not easily extended.
It will not work outside of AUCTeX, either.

@item Integrate into Ref@TeX{}

When referencing to equations and the like, the preview-images of the
source rather than plain text should be displayed.  If the preview in
question covers labels, those should appear in the bubble help and/or a
context menu.  Apropos:

@item Implement @LaTeX{} error indicators

Previews on erroneous @LaTeX{} passages might gain a red border or similar.

@item Pop up relevant online documentation for frequent errors

A lot of errors are of the "badly configured" variety.  Perhaps the
relevant info pages should be delivered in addition to the error
message.

@item Implement a table editing mode where every table cell gets output
as a separate preview.  Alternatively, output the complete table
metrics in a way that lets people click on individual cells for editing
purposes.

@item Benchmark and kill Emacs inefficiencies

Both the @LaTeX{} run under Emacs control as well as actual image
insertion in Emacs could be faster.  CVS Emacs has improved in that
respect, but it still is slower than desirable.

@item Improve image support under Emacs

The general image and color handling in Emacs is inefficient and partly
defective.  This is still the case in CVS.  One option would be to
replace the whole color and image handling with @acronym{GDK} routines
when this library is available, since it has been optimized for it.

@end itemize
